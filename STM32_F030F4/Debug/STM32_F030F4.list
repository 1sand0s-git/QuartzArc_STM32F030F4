
STM32_F030F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080016b4  080016b4  000116b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016e4  080016e4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080016e4  080016e4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016e4  080016e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016e4  080016e4  000116e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016e8  080016e8  000116e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080016ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000070  0800175c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  0800175c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_line   000069ae  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000060f4  00000000  00000000  00026a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000186a  00000000  00000000  0002cb3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004f0  00000000  00000000  0002e3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0006c821  00000000  00000000  0002e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000438  00000000  00000000  0009b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00013122  00000000  00000000  0009b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ae61a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000130c  00000000  00000000  000ae670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800169c 	.word	0x0800169c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800169c 	.word	0x0800169c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000224:	480d      	ldr	r0, [pc, #52]	; (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 8000226:	490e      	ldr	r1, [pc, #56]	; (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000228:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800022c:	e002      	b.n	8000234 <LoopCopyDataInit>

0800022e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800022e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000232:	3304      	adds	r3, #4

08000234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000238:	d3f9      	bcc.n	800022e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 800023c:	4c0b      	ldr	r4, [pc, #44]	; (800026c <LoopForever+0x16>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000240:	e001      	b.n	8000246 <LoopFillZerobss>

08000242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000244:	3204      	adds	r2, #4

08000246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000248:	d3fb      	bcc.n	8000242 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800024a:	f000 f98b 	bl	8000564 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800024e:	f001 f923 	bl	8001498 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f000 f8db 	bl	800040c <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000264:	080016ec 	.word	0x080016ec
  ldr r2, =_sbss
 8000268:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800026c:	200000b4 	.word	0x200000b4

08000270 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_IRQHandler>
	...

08000274 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks
//Also enables all GPIO ports, and both DMA1 and DMA2 peripherals
//
//Returns QA_OK if successful, or QA_Fail if initialization failed
QA_Result SystemInitialize(void) {
 8000274:	b590      	push	{r4, r7, lr}
 8000276:	b095      	sub	sp, #84	; 0x54
 8000278:	af00      	add	r7, sp, #0

	//----------------------
	//Enable Prefetch Buffer
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800027a:	4b51      	ldr	r3, [pc, #324]	; (80003c0 <_Z16SystemInitializev+0x14c>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b50      	ldr	r3, [pc, #320]	; (80003c0 <_Z16SystemInitializev+0x14c>)
 8000280:	2110      	movs	r1, #16
 8000282:	430a      	orrs	r2, r1
 8000284:	601a      	str	r2, [r3, #0]
	//HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);


	//------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8000286:	2003      	movs	r0, #3
 8000288:	f000 f972 	bl	8000570 <HAL_InitTick>
 800028c:	0003      	movs	r3, r0
 800028e:	1e5a      	subs	r2, r3, #1
 8000290:	4193      	sbcs	r3, r2
 8000292:	b2db      	uxtb	r3, r3
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <_Z16SystemInitializev+0x28>
		return QA_Fail;
 8000298:	2301      	movs	r3, #1
 800029a:	e08c      	b.n	80003b6 <_Z16SystemInitializev+0x142>
	}


	//-------------------------
	//Setup Power Configuration
	__HAL_RCC_PWR_CLK_ENABLE();
 800029c:	4b49      	ldr	r3, [pc, #292]	; (80003c4 <_Z16SystemInitializev+0x150>)
 800029e:	69da      	ldr	r2, [r3, #28]
 80002a0:	4b48      	ldr	r3, [pc, #288]	; (80003c4 <_Z16SystemInitializev+0x150>)
 80002a2:	2180      	movs	r1, #128	; 0x80
 80002a4:	0549      	lsls	r1, r1, #21
 80002a6:	430a      	orrs	r2, r1
 80002a8:	61da      	str	r2, [r3, #28]
 80002aa:	4b46      	ldr	r3, [pc, #280]	; (80003c4 <_Z16SystemInitializev+0x150>)
 80002ac:	69da      	ldr	r2, [r3, #28]
 80002ae:	2380      	movs	r3, #128	; 0x80
 80002b0:	055b      	lsls	r3, r3, #21
 80002b2:	4013      	ands	r3, r2
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	68fb      	ldr	r3, [r7, #12]
	//---------------------
	//Configure Oscillators
	//
	//Configure High Speed External (HSE) oscillator to be used, and setup primary PLL to provide 48MHz clock
	//NOTE: HSE Oscillator on STM32F030F4 Demo Board is supplied by an 8MHz crystal
	RCC_OscInitTypeDef RCC_OscInit = {0};
 80002b8:	2420      	movs	r4, #32
 80002ba:	193b      	adds	r3, r7, r4
 80002bc:	0018      	movs	r0, r3
 80002be:	2330      	movs	r3, #48	; 0x30
 80002c0:	001a      	movs	r2, r3
 80002c2:	2100      	movs	r1, #0
 80002c4:	f001 f916 	bl	80014f4 <memset>
	RCC_OscInit.OscillatorType        = RCC_OSCILLATORTYPE_HSE |
 80002c8:	0021      	movs	r1, r4
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2213      	movs	r2, #19
 80002ce:	601a      	str	r2, [r3, #0]
			                                RCC_OSCILLATORTYPE_HSI |
															        RCC_OSCILLATORTYPE_HSI14;  //Define which oscillators are to be configured
	RCC_OscInit.HSEState              = RCC_HSE_ON;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2201      	movs	r2, #1
 80002d4:	605a      	str	r2, [r3, #4]
	RCC_OscInit.HSIState              = RCC_HSI_ON;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2201      	movs	r2, #1
 80002da:	60da      	str	r2, [r3, #12]
	RCC_OscInit.HSICalibrationValue   = RCC_HSICALIBRATION_DEFAULT;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2210      	movs	r2, #16
 80002e0:	611a      	str	r2, [r3, #16]
	RCC_OscInit.HSI14State            = RCC_HSI14_ON;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2201      	movs	r2, #1
 80002e6:	615a      	str	r2, [r3, #20]
	RCC_OscInit.HSI14CalibrationValue = RCC_HSI14CALIBRATION_DEFAULT;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2210      	movs	r2, #16
 80002ec:	619a      	str	r2, [r3, #24]
  RCC_OscInit.PLL.PLLState          = RCC_PLL_ON;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2202      	movs	r2, #2
 80002f2:	621a      	str	r2, [r3, #32]
  RCC_OscInit.PLL.PLLSource         = RCC_PLLSOURCE_HSI;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2200      	movs	r2, #0
 80002f8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInit.PLL.PLLMUL            = RCC_PLL_MUL12;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	22a0      	movs	r2, #160	; 0xa0
 80002fe:	0392      	lsls	r2, r2, #14
 8000300:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInit.PLL.PREDIV            = RCC_PREDIV_DIV1;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {
 8000308:	187b      	adds	r3, r7, r1
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fbc2 	bl	8000a94 <HAL_RCC_OscConfig>
 8000310:	0003      	movs	r3, r0
 8000312:	1e5a      	subs	r2, r3, #1
 8000314:	4193      	sbcs	r3, r2
 8000316:	b2db      	uxtb	r3, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	d001      	beq.n	8000320 <_Z16SystemInitializev+0xac>
  	return QA_Fail;
 800031c:	2301      	movs	r3, #1
 800031e:	e04a      	b.n	80003b6 <_Z16SystemInitializev+0x142>
  }


  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000320:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <_Z16SystemInitializev+0x150>)
 8000322:	699a      	ldr	r2, [r3, #24]
 8000324:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <_Z16SystemInitializev+0x150>)
 8000326:	2101      	movs	r1, #1
 8000328:	430a      	orrs	r2, r1
 800032a:	619a      	str	r2, [r3, #24]
 800032c:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <_Z16SystemInitializev+0x150>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	2201      	movs	r2, #1
 8000332:	4013      	ands	r3, r2
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	68bb      	ldr	r3, [r7, #8]


  //--------------------------
  //Configure CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000338:	2410      	movs	r4, #16
 800033a:	193b      	adds	r3, r7, r4
 800033c:	0018      	movs	r0, r3
 800033e:	2310      	movs	r3, #16
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f001 f8d6 	bl	80014f4 <memset>
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |
 8000348:	0021      	movs	r1, r4
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2207      	movs	r2, #7
 800034e:	601a      	str	r2, [r3, #0]
  		                         RCC_CLOCKTYPE_SYSCLK |
													     RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8000350:	187b      	adds	r3, r7, r1
 8000352:	2202      	movs	r2, #2
 8000354:	605a      	str	r2, [r3, #4]
  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_1) != HAL_OK) {
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2101      	movs	r1, #1
 8000366:	0018      	movs	r0, r3
 8000368:	f000 feae 	bl	80010c8 <HAL_RCC_ClockConfig>
 800036c:	0003      	movs	r3, r0
 800036e:	1e5a      	subs	r2, r3, #1
 8000370:	4193      	sbcs	r3, r2
 8000372:	b2db      	uxtb	r3, r3
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <_Z16SystemInitializev+0x108>
  	return QA_Fail;
 8000378:	2301      	movs	r3, #1
 800037a:	e01c      	b.n	80003b6 <_Z16SystemInitializev+0x142>
  }


  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <_Z16SystemInitializev+0x150>)
 800037e:	695a      	ldr	r2, [r3, #20]
 8000380:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <_Z16SystemInitializev+0x150>)
 8000382:	2180      	movs	r1, #128	; 0x80
 8000384:	0289      	lsls	r1, r1, #10
 8000386:	430a      	orrs	r2, r1
 8000388:	615a      	str	r2, [r3, #20]
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <_Z16SystemInitializev+0x150>)
 800038c:	695a      	ldr	r2, [r3, #20]
 800038e:	2380      	movs	r3, #128	; 0x80
 8000390:	029b      	lsls	r3, r3, #10
 8000392:	4013      	ands	r3, r2
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <_Z16SystemInitializev+0x150>)
 800039a:	695a      	ldr	r2, [r3, #20]
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <_Z16SystemInitializev+0x150>)
 800039e:	2180      	movs	r1, #128	; 0x80
 80003a0:	03c9      	lsls	r1, r1, #15
 80003a2:	430a      	orrs	r2, r1
 80003a4:	615a      	str	r2, [r3, #20]
 80003a6:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <_Z16SystemInitializev+0x150>)
 80003a8:	695a      	ldr	r2, [r3, #20]
 80003aa:	2380      	movs	r3, #128	; 0x80
 80003ac:	03db      	lsls	r3, r3, #15
 80003ae:	4013      	ands	r3, r2
 80003b0:	603b      	str	r3, [r7, #0]
 80003b2:	683b      	ldr	r3, [r7, #0]


  //Return
  return QA_OK;
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	0018      	movs	r0, r3
 80003b8:	46bd      	mov	sp, r7
 80003ba:	b015      	add	sp, #84	; 0x54
 80003bc:	bd90      	pop	{r4, r7, pc}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	40022000 	.word	0x40022000
 80003c4:	40021000 	.word	0x40021000

080003c8 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0

}
 80003cc:	46c0      	nop			; (mov r8, r8)
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80003d8:	4b02      	ldr	r3, [pc, #8]	; (80003e4 <HardFault_Handler+0x10>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	0018      	movs	r0, r3
 80003de:	f000 ffc8 	bl	8001372 <_ZN15QAD_GPIO_Output2onEv>
  while(1) {}
 80003e2:	e7fe      	b.n	80003e2 <HardFault_Handler+0xe>
 80003e4:	2000008c 	.word	0x2000008c

080003e8 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0

}
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <PendSV_Handler>:
}


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 80003f2:	b580      	push	{r7, lr}
 80003f4:	af00      	add	r7, sp, #0

}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000400:	f000 f8ea 	bl	80005d8 <HAL_IncTick>
}
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <main>:
//main
//Application Entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f769nihx.s
int main(void) {
 800040c:	b590      	push	{r4, r7, lr}
 800040e:	b087      	sub	sp, #28
 8000410:	af00      	add	r7, sp, #0
  //System Initialization

	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method
	if (SystemInitialize()) {
 8000412:	f7ff ff2f 	bl	8000274 <_Z16SystemInitializev>
 8000416:	0003      	movs	r3, r0
 8000418:	1e5a      	subs	r2, r3, #1
 800041a:	4193      	sbcs	r3, r2
 800041c:	b2db      	uxtb	r3, r3
 800041e:	2b00      	cmp	r3, #0
 8000420:	d000      	beq.n	8000424 <main+0x18>
	  while (1) {}
 8000422:	e7fe      	b.n	8000422 <main+0x16>


	//----------------------------------
	//Initialize the User LED using the QAD_GPIO_Output driver class.
	//QAD_USERLED_GPIO_PORT and QAD_USERLED_GPIO_PIN are defined in setup.hpp
	GPIO_UserLED = new QAD_GPIO_Output(QAD_USERLED_GPIO_PORT, QAD_USERLED_GPIO_PIN);
 8000424:	2014      	movs	r0, #20
 8000426:	f001 f810 	bl	800144a <_Znwj>
 800042a:	0003      	movs	r3, r0
 800042c:	001c      	movs	r4, r3
 800042e:	2390      	movs	r3, #144	; 0x90
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	2210      	movs	r2, #16
 8000434:	0019      	movs	r1, r3
 8000436:	0020      	movs	r0, r4
 8000438:	f000 ff78 	bl	800132c <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 800043c:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <main+0xa4>)
 800043e:	601c      	str	r4, [r3, #0]
	//Processing Loop

  //Create processing loop timing variables
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 8000440:	f000 f8dc 	bl	80005fc <HAL_GetTick>
 8000444:	0003      	movs	r3, r0
 8000446:	613b      	str	r3, [r7, #16]
	uint32_t uOldTick = uNewTick;
 8000448:	693b      	ldr	r3, [r7, #16]
 800044a:	60bb      	str	r3, [r7, #8]

  //Create task timing variables
	uint32_t uHeartbeatTicks = 0;
 800044c:	2300      	movs	r3, #0
 800044e:	60fb      	str	r3, [r7, #12]

		//----------------------------------
		//Frame Timing
		//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
		//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 8000450:	f000 f8d4 	bl	80005fc <HAL_GetTick>
 8000454:	0003      	movs	r3, r0
 8000456:	607b      	str	r3, [r7, #4]
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	693b      	ldr	r3, [r7, #16]
 800045c:	429a      	cmp	r2, r3
 800045e:	d012      	beq.n	8000486 <main+0x7a>
    	uOldTick = uNewTick;
 8000460:	693b      	ldr	r3, [r7, #16]
 8000462:	60bb      	str	r3, [r7, #8]
    	uNewTick = uCurTick;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	613b      	str	r3, [r7, #16]
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000468:	693a      	ldr	r2, [r7, #16]
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	429a      	cmp	r2, r3
 800046e:	d205      	bcs.n	800047c <main+0x70>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8000470:	693a      	ldr	r2, [r7, #16]
 8000472:	68bb      	ldr	r3, [r7, #8]
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	3b01      	subs	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
 800047a:	e006      	b.n	800048a <main+0x7e>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 800047c:	693a      	ldr	r2, [r7, #16]
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	1ad3      	subs	r3, r2, r3
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	e001      	b.n	800048a <main+0x7e>
    	}

    } else {
    	uTicks = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	18d3      	adds	r3, r2, r3
 8000490:	60fb      	str	r3, [r7, #12]
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) { //If heartbeat ticks has exceeded threshold then update heartbeat LED
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	23fa      	movs	r3, #250	; 0xfa
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	429a      	cmp	r2, r3
 800049a:	d3d9      	bcc.n	8000450 <main+0x44>
    	GPIO_UserLED->toggle();
 800049c:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <main+0xa4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 ff8c 	bl	80013be <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;     //Reset heartbeat ticks
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	3bf5      	subs	r3, #245	; 0xf5
 80004aa:	3bff      	subs	r3, #255	; 0xff
 80004ac:	60fb      	str	r3, [r7, #12]
    uCurTick = HAL_GetTick();
 80004ae:	e7cf      	b.n	8000450 <main+0x44>
 80004b0:	2000008c 	.word	0x2000008c

080004b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	return 1;
 80004b8:	2301      	movs	r3, #1
}
 80004ba:	0018      	movs	r0, r3
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <_kill>:

int _kill(int pid, int sig)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80004ca:	f000 ffdf 	bl	800148c <__errno>
 80004ce:	0003      	movs	r3, r0
 80004d0:	2216      	movs	r2, #22
 80004d2:	601a      	str	r2, [r3, #0]
	return -1;
 80004d4:	2301      	movs	r3, #1
 80004d6:	425b      	negs	r3, r3
}
 80004d8:	0018      	movs	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	b002      	add	sp, #8
 80004de:	bd80      	pop	{r7, pc}

080004e0 <_exit>:

void _exit (int status)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80004e8:	2301      	movs	r3, #1
 80004ea:	425a      	negs	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	0011      	movs	r1, r2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f7ff ffe5 	bl	80004c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80004f6:	e7fe      	b.n	80004f6 <_exit+0x16>

080004f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000500:	4a14      	ldr	r2, [pc, #80]	; (8000554 <_sbrk+0x5c>)
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <_sbrk+0x60>)
 8000504:	1ad3      	subs	r3, r2, r3
 8000506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800050c:	4b13      	ldr	r3, [pc, #76]	; (800055c <_sbrk+0x64>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d102      	bne.n	800051a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <_sbrk+0x64>)
 8000516:	4a12      	ldr	r2, [pc, #72]	; (8000560 <_sbrk+0x68>)
 8000518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800051a:	4b10      	ldr	r3, [pc, #64]	; (800055c <_sbrk+0x64>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	18d3      	adds	r3, r2, r3
 8000522:	693a      	ldr	r2, [r7, #16]
 8000524:	429a      	cmp	r2, r3
 8000526:	d207      	bcs.n	8000538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000528:	f000 ffb0 	bl	800148c <__errno>
 800052c:	0003      	movs	r3, r0
 800052e:	220c      	movs	r2, #12
 8000530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000532:	2301      	movs	r3, #1
 8000534:	425b      	negs	r3, r3
 8000536:	e009      	b.n	800054c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <_sbrk+0x64>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <_sbrk+0x64>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	18d2      	adds	r2, r2, r3
 8000546:	4b05      	ldr	r3, [pc, #20]	; (800055c <_sbrk+0x64>)
 8000548:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800054a:	68fb      	ldr	r3, [r7, #12]
}
 800054c:	0018      	movs	r0, r3
 800054e:	46bd      	mov	sp, r7
 8000550:	b006      	add	sp, #24
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20001000 	.word	0x20001000
 8000558:	00000400 	.word	0x00000400
 800055c:	20000090 	.word	0x20000090
 8000560:	200000b8 	.word	0x200000b8

08000564 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <HAL_InitTick+0x5c>)
 800057a:	681c      	ldr	r4, [r3, #0]
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <HAL_InitTick+0x60>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	0019      	movs	r1, r3
 8000582:	23fa      	movs	r3, #250	; 0xfa
 8000584:	0098      	lsls	r0, r3, #2
 8000586:	f7ff fdbf 	bl	8000108 <__udivsi3>
 800058a:	0003      	movs	r3, r0
 800058c:	0019      	movs	r1, r3
 800058e:	0020      	movs	r0, r4
 8000590:	f7ff fdba 	bl	8000108 <__udivsi3>
 8000594:	0003      	movs	r3, r0
 8000596:	0018      	movs	r0, r3
 8000598:	f000 f8e1 	bl	800075e <HAL_SYSTICK_Config>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80005a0:	2301      	movs	r3, #1
 80005a2:	e00f      	b.n	80005c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d80b      	bhi.n	80005c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	2301      	movs	r3, #1
 80005ae:	425b      	negs	r3, r3
 80005b0:	2200      	movs	r2, #0
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 f8be 	bl	8000734 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_InitTick+0x64>)
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	e000      	b.n	80005c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	0018      	movs	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b003      	add	sp, #12
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000008 	.word	0x20000008
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <HAL_IncTick+0x1c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	001a      	movs	r2, r3
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <HAL_IncTick+0x20>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	18d2      	adds	r2, r2, r3
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_IncTick+0x20>)
 80005ea:	601a      	str	r2, [r3, #0]
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	20000008 	.word	0x20000008
 80005f8:	200000a0 	.word	0x200000a0

080005fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b02      	ldr	r3, [pc, #8]	; (800060c <HAL_GetTick+0x10>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	200000a0 	.word	0x200000a0

08000610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	0002      	movs	r2, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800061e:	1dfb      	adds	r3, r7, #7
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b7f      	cmp	r3, #127	; 0x7f
 8000624:	d828      	bhi.n	8000678 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000626:	4a2f      	ldr	r2, [pc, #188]	; (80006e4 <__NVIC_SetPriority+0xd4>)
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b25b      	sxtb	r3, r3
 800062e:	089b      	lsrs	r3, r3, #2
 8000630:	33c0      	adds	r3, #192	; 0xc0
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	589b      	ldr	r3, [r3, r2]
 8000636:	1dfa      	adds	r2, r7, #7
 8000638:	7812      	ldrb	r2, [r2, #0]
 800063a:	0011      	movs	r1, r2
 800063c:	2203      	movs	r2, #3
 800063e:	400a      	ands	r2, r1
 8000640:	00d2      	lsls	r2, r2, #3
 8000642:	21ff      	movs	r1, #255	; 0xff
 8000644:	4091      	lsls	r1, r2
 8000646:	000a      	movs	r2, r1
 8000648:	43d2      	mvns	r2, r2
 800064a:	401a      	ands	r2, r3
 800064c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	019b      	lsls	r3, r3, #6
 8000652:	22ff      	movs	r2, #255	; 0xff
 8000654:	401a      	ands	r2, r3
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	0018      	movs	r0, r3
 800065c:	2303      	movs	r3, #3
 800065e:	4003      	ands	r3, r0
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000664:	481f      	ldr	r0, [pc, #124]	; (80006e4 <__NVIC_SetPriority+0xd4>)
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b25b      	sxtb	r3, r3
 800066c:	089b      	lsrs	r3, r3, #2
 800066e:	430a      	orrs	r2, r1
 8000670:	33c0      	adds	r3, #192	; 0xc0
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000676:	e031      	b.n	80006dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000678:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <__NVIC_SetPriority+0xd8>)
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	0019      	movs	r1, r3
 8000680:	230f      	movs	r3, #15
 8000682:	400b      	ands	r3, r1
 8000684:	3b08      	subs	r3, #8
 8000686:	089b      	lsrs	r3, r3, #2
 8000688:	3306      	adds	r3, #6
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	18d3      	adds	r3, r2, r3
 800068e:	3304      	adds	r3, #4
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	1dfa      	adds	r2, r7, #7
 8000694:	7812      	ldrb	r2, [r2, #0]
 8000696:	0011      	movs	r1, r2
 8000698:	2203      	movs	r2, #3
 800069a:	400a      	ands	r2, r1
 800069c:	00d2      	lsls	r2, r2, #3
 800069e:	21ff      	movs	r1, #255	; 0xff
 80006a0:	4091      	lsls	r1, r2
 80006a2:	000a      	movs	r2, r1
 80006a4:	43d2      	mvns	r2, r2
 80006a6:	401a      	ands	r2, r3
 80006a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	019b      	lsls	r3, r3, #6
 80006ae:	22ff      	movs	r2, #255	; 0xff
 80006b0:	401a      	ands	r2, r3
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	0018      	movs	r0, r3
 80006b8:	2303      	movs	r3, #3
 80006ba:	4003      	ands	r3, r0
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <__NVIC_SetPriority+0xd8>)
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	001c      	movs	r4, r3
 80006c8:	230f      	movs	r3, #15
 80006ca:	4023      	ands	r3, r4
 80006cc:	3b08      	subs	r3, #8
 80006ce:	089b      	lsrs	r3, r3, #2
 80006d0:	430a      	orrs	r2, r1
 80006d2:	3306      	adds	r3, #6
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	18c3      	adds	r3, r0, r3
 80006d8:	3304      	adds	r3, #4
 80006da:	601a      	str	r2, [r3, #0]
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	b003      	add	sp, #12
 80006e2:	bd90      	pop	{r4, r7, pc}
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	045b      	lsls	r3, r3, #17
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d301      	bcc.n	8000704 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000700:	2301      	movs	r3, #1
 8000702:	e010      	b.n	8000726 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <SysTick_Config+0x44>)
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	3a01      	subs	r2, #1
 800070a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800070c:	2301      	movs	r3, #1
 800070e:	425b      	negs	r3, r3
 8000710:	2103      	movs	r1, #3
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff ff7c 	bl	8000610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <SysTick_Config+0x44>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <SysTick_Config+0x44>)
 8000720:	2207      	movs	r2, #7
 8000722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000724:	2300      	movs	r3, #0
}
 8000726:	0018      	movs	r0, r3
 8000728:	46bd      	mov	sp, r7
 800072a:	b002      	add	sp, #8
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	e000e010 	.word	0xe000e010

08000734 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	210f      	movs	r1, #15
 8000740:	187b      	adds	r3, r7, r1
 8000742:	1c02      	adds	r2, r0, #0
 8000744:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	187b      	adds	r3, r7, r1
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b25b      	sxtb	r3, r3
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f7ff ff5d 	bl	8000610 <__NVIC_SetPriority>
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b004      	add	sp, #16
 800075c:	bd80      	pop	{r7, pc}

0800075e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	b082      	sub	sp, #8
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff ffbf 	bl	80006ec <SysTick_Config>
 800076e:	0003      	movs	r3, r0
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b002      	add	sp, #8
 8000776:	bd80      	pop	{r7, pc}

08000778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000786:	e14f      	b.n	8000a28 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2101      	movs	r1, #1
 800078e:	697a      	ldr	r2, [r7, #20]
 8000790:	4091      	lsls	r1, r2
 8000792:	000a      	movs	r2, r1
 8000794:	4013      	ands	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d100      	bne.n	80007a0 <HAL_GPIO_Init+0x28>
 800079e:	e140      	b.n	8000a22 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	2203      	movs	r2, #3
 80007a6:	4013      	ands	r3, r2
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d005      	beq.n	80007b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	2203      	movs	r2, #3
 80007b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d130      	bne.n	800081a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	2203      	movs	r2, #3
 80007c4:	409a      	lsls	r2, r3
 80007c6:	0013      	movs	r3, r2
 80007c8:	43da      	mvns	r2, r3
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	4013      	ands	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	68da      	ldr	r2, [r3, #12]
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	409a      	lsls	r2, r3
 80007da:	0013      	movs	r3, r2
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	4313      	orrs	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	693a      	ldr	r2, [r7, #16]
 80007e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007ee:	2201      	movs	r2, #1
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
 80007f4:	0013      	movs	r3, r2
 80007f6:	43da      	mvns	r2, r3
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	4013      	ands	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	091b      	lsrs	r3, r3, #4
 8000804:	2201      	movs	r2, #1
 8000806:	401a      	ands	r2, r3
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	409a      	lsls	r2, r3
 800080c:	0013      	movs	r3, r2
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	4313      	orrs	r3, r2
 8000812:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2203      	movs	r2, #3
 8000820:	4013      	ands	r3, r2
 8000822:	2b03      	cmp	r3, #3
 8000824:	d017      	beq.n	8000856 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	2203      	movs	r2, #3
 8000832:	409a      	lsls	r2, r3
 8000834:	0013      	movs	r3, r2
 8000836:	43da      	mvns	r2, r3
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	4013      	ands	r3, r2
 800083c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	689a      	ldr	r2, [r3, #8]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	409a      	lsls	r2, r3
 8000848:	0013      	movs	r3, r2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	4313      	orrs	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2203      	movs	r2, #3
 800085c:	4013      	ands	r3, r2
 800085e:	2b02      	cmp	r3, #2
 8000860:	d123      	bne.n	80008aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	08da      	lsrs	r2, r3, #3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3208      	adds	r2, #8
 800086a:	0092      	lsls	r2, r2, #2
 800086c:	58d3      	ldr	r3, [r2, r3]
 800086e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	2207      	movs	r2, #7
 8000874:	4013      	ands	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	220f      	movs	r2, #15
 800087a:	409a      	lsls	r2, r3
 800087c:	0013      	movs	r3, r2
 800087e:	43da      	mvns	r2, r3
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	4013      	ands	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	691a      	ldr	r2, [r3, #16]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	2107      	movs	r1, #7
 800088e:	400b      	ands	r3, r1
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	409a      	lsls	r2, r3
 8000894:	0013      	movs	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4313      	orrs	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3208      	adds	r2, #8
 80008a4:	0092      	lsls	r2, r2, #2
 80008a6:	6939      	ldr	r1, [r7, #16]
 80008a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	409a      	lsls	r2, r3
 80008b8:	0013      	movs	r3, r2
 80008ba:	43da      	mvns	r2, r3
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	4013      	ands	r3, r2
 80008c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2203      	movs	r2, #3
 80008c8:	401a      	ands	r2, r3
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	409a      	lsls	r2, r3
 80008d0:	0013      	movs	r3, r2
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685a      	ldr	r2, [r3, #4]
 80008e2:	23c0      	movs	r3, #192	; 0xc0
 80008e4:	029b      	lsls	r3, r3, #10
 80008e6:	4013      	ands	r3, r2
 80008e8:	d100      	bne.n	80008ec <HAL_GPIO_Init+0x174>
 80008ea:	e09a      	b.n	8000a22 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ec:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <HAL_GPIO_Init+0x2c8>)
 80008ee:	699a      	ldr	r2, [r3, #24]
 80008f0:	4b53      	ldr	r3, [pc, #332]	; (8000a40 <HAL_GPIO_Init+0x2c8>)
 80008f2:	2101      	movs	r1, #1
 80008f4:	430a      	orrs	r2, r1
 80008f6:	619a      	str	r2, [r3, #24]
 80008f8:	4b51      	ldr	r3, [pc, #324]	; (8000a40 <HAL_GPIO_Init+0x2c8>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	2201      	movs	r2, #1
 80008fe:	4013      	ands	r3, r2
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000904:	4a4f      	ldr	r2, [pc, #316]	; (8000a44 <HAL_GPIO_Init+0x2cc>)
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	089b      	lsrs	r3, r3, #2
 800090a:	3302      	adds	r3, #2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	589b      	ldr	r3, [r3, r2]
 8000910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	2203      	movs	r2, #3
 8000916:	4013      	ands	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	220f      	movs	r2, #15
 800091c:	409a      	lsls	r2, r3
 800091e:	0013      	movs	r3, r2
 8000920:	43da      	mvns	r2, r3
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	2390      	movs	r3, #144	; 0x90
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	429a      	cmp	r2, r3
 8000930:	d013      	beq.n	800095a <HAL_GPIO_Init+0x1e2>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a44      	ldr	r2, [pc, #272]	; (8000a48 <HAL_GPIO_Init+0x2d0>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d00d      	beq.n	8000956 <HAL_GPIO_Init+0x1de>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a43      	ldr	r2, [pc, #268]	; (8000a4c <HAL_GPIO_Init+0x2d4>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d007      	beq.n	8000952 <HAL_GPIO_Init+0x1da>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a42      	ldr	r2, [pc, #264]	; (8000a50 <HAL_GPIO_Init+0x2d8>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d101      	bne.n	800094e <HAL_GPIO_Init+0x1d6>
 800094a:	2303      	movs	r3, #3
 800094c:	e006      	b.n	800095c <HAL_GPIO_Init+0x1e4>
 800094e:	2305      	movs	r3, #5
 8000950:	e004      	b.n	800095c <HAL_GPIO_Init+0x1e4>
 8000952:	2302      	movs	r3, #2
 8000954:	e002      	b.n	800095c <HAL_GPIO_Init+0x1e4>
 8000956:	2301      	movs	r3, #1
 8000958:	e000      	b.n	800095c <HAL_GPIO_Init+0x1e4>
 800095a:	2300      	movs	r3, #0
 800095c:	697a      	ldr	r2, [r7, #20]
 800095e:	2103      	movs	r1, #3
 8000960:	400a      	ands	r2, r1
 8000962:	0092      	lsls	r2, r2, #2
 8000964:	4093      	lsls	r3, r2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800096c:	4935      	ldr	r1, [pc, #212]	; (8000a44 <HAL_GPIO_Init+0x2cc>)
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	089b      	lsrs	r3, r3, #2
 8000972:	3302      	adds	r3, #2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800097a:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <HAL_GPIO_Init+0x2dc>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	43da      	mvns	r2, r3
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	025b      	lsls	r3, r3, #9
 8000992:	4013      	ands	r3, r2
 8000994:	d003      	beq.n	800099e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4313      	orrs	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800099e:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <HAL_GPIO_Init+0x2dc>)
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80009a4:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <HAL_GPIO_Init+0x2dc>)
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	43da      	mvns	r2, r3
 80009ae:	693b      	ldr	r3, [r7, #16]
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	2380      	movs	r3, #128	; 0x80
 80009ba:	029b      	lsls	r3, r3, #10
 80009bc:	4013      	ands	r3, r2
 80009be:	d003      	beq.n	80009c8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <HAL_GPIO_Init+0x2dc>)
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009ce:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <HAL_GPIO_Init+0x2dc>)
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	43da      	mvns	r2, r3
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	2380      	movs	r3, #128	; 0x80
 80009e4:	035b      	lsls	r3, r3, #13
 80009e6:	4013      	ands	r3, r2
 80009e8:	d003      	beq.n	80009f2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_GPIO_Init+0x2dc>)
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_GPIO_Init+0x2dc>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	43da      	mvns	r2, r3
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	4013      	ands	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	039b      	lsls	r3, r3, #14
 8000a10:	4013      	ands	r3, r2
 8000a12:	d003      	beq.n	8000a1c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_GPIO_Init+0x2dc>)
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	3301      	adds	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	40da      	lsrs	r2, r3
 8000a30:	1e13      	subs	r3, r2, #0
 8000a32:	d000      	beq.n	8000a36 <HAL_GPIO_Init+0x2be>
 8000a34:	e6a8      	b.n	8000788 <HAL_GPIO_Init+0x10>
  } 
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b006      	add	sp, #24
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010000 	.word	0x40010000
 8000a48:	48000400 	.word	0x48000400
 8000a4c:	48000800 	.word	0x48000800
 8000a50:	48000c00 	.word	0x48000c00
 8000a54:	40010400 	.word	0x40010400

08000a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	0008      	movs	r0, r1
 8000a62:	0011      	movs	r1, r2
 8000a64:	1cbb      	adds	r3, r7, #2
 8000a66:	1c02      	adds	r2, r0, #0
 8000a68:	801a      	strh	r2, [r3, #0]
 8000a6a:	1c7b      	adds	r3, r7, #1
 8000a6c:	1c0a      	adds	r2, r1, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a70:	1c7b      	adds	r3, r7, #1
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d004      	beq.n	8000a82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a78:	1cbb      	adds	r3, r7, #2
 8000a7a:	881a      	ldrh	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a80:	e003      	b.n	8000a8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a82:	1cbb      	adds	r3, r7, #2
 8000a84:	881a      	ldrh	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d101      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e301      	b.n	80010aa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4013      	ands	r3, r2
 8000aae:	d100      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x1e>
 8000ab0:	e08d      	b.n	8000bce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ab2:	4bc3      	ldr	r3, [pc, #780]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	4013      	ands	r3, r2
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d00e      	beq.n	8000adc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000abe:	4bc0      	ldr	r3, [pc, #768]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	2b08      	cmp	r3, #8
 8000ac8:	d116      	bne.n	8000af8 <HAL_RCC_OscConfig+0x64>
 8000aca:	4bbd      	ldr	r3, [pc, #756]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	025b      	lsls	r3, r3, #9
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	025b      	lsls	r3, r3, #9
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d10d      	bne.n	8000af8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000adc:	4bb8      	ldr	r3, [pc, #736]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	029b      	lsls	r3, r3, #10
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	d100      	bne.n	8000aea <HAL_RCC_OscConfig+0x56>
 8000ae8:	e070      	b.n	8000bcc <HAL_RCC_OscConfig+0x138>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d000      	beq.n	8000af4 <HAL_RCC_OscConfig+0x60>
 8000af2:	e06b      	b.n	8000bcc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e2d8      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d107      	bne.n	8000b10 <HAL_RCC_OscConfig+0x7c>
 8000b00:	4baf      	ldr	r3, [pc, #700]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4bae      	ldr	r3, [pc, #696]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b06:	2180      	movs	r1, #128	; 0x80
 8000b08:	0249      	lsls	r1, r1, #9
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	e02f      	b.n	8000b70 <HAL_RCC_OscConfig+0xdc>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d10c      	bne.n	8000b32 <HAL_RCC_OscConfig+0x9e>
 8000b18:	4ba9      	ldr	r3, [pc, #676]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4ba8      	ldr	r3, [pc, #672]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b1e:	49a9      	ldr	r1, [pc, #676]	; (8000dc4 <HAL_RCC_OscConfig+0x330>)
 8000b20:	400a      	ands	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	4ba6      	ldr	r3, [pc, #664]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4ba5      	ldr	r3, [pc, #660]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b2a:	49a7      	ldr	r1, [pc, #668]	; (8000dc8 <HAL_RCC_OscConfig+0x334>)
 8000b2c:	400a      	ands	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	e01e      	b.n	8000b70 <HAL_RCC_OscConfig+0xdc>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2b05      	cmp	r3, #5
 8000b38:	d10e      	bne.n	8000b58 <HAL_RCC_OscConfig+0xc4>
 8000b3a:	4ba1      	ldr	r3, [pc, #644]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4ba0      	ldr	r3, [pc, #640]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	02c9      	lsls	r1, r1, #11
 8000b44:	430a      	orrs	r2, r1
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	4b9d      	ldr	r3, [pc, #628]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b9c      	ldr	r3, [pc, #624]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	0249      	lsls	r1, r1, #9
 8000b52:	430a      	orrs	r2, r1
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	e00b      	b.n	8000b70 <HAL_RCC_OscConfig+0xdc>
 8000b58:	4b99      	ldr	r3, [pc, #612]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b98      	ldr	r3, [pc, #608]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b5e:	4999      	ldr	r1, [pc, #612]	; (8000dc4 <HAL_RCC_OscConfig+0x330>)
 8000b60:	400a      	ands	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	4b96      	ldr	r3, [pc, #600]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b95      	ldr	r3, [pc, #596]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b6a:	4997      	ldr	r1, [pc, #604]	; (8000dc8 <HAL_RCC_OscConfig+0x334>)
 8000b6c:	400a      	ands	r2, r1
 8000b6e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d014      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b78:	f7ff fd40 	bl	80005fc <HAL_GetTick>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b80:	e008      	b.n	8000b94 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b82:	f7ff fd3b 	bl	80005fc <HAL_GetTick>
 8000b86:	0002      	movs	r2, r0
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	2b64      	cmp	r3, #100	; 0x64
 8000b8e:	d901      	bls.n	8000b94 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000b90:	2303      	movs	r3, #3
 8000b92:	e28a      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b94:	4b8a      	ldr	r3, [pc, #552]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	029b      	lsls	r3, r3, #10
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	d0f0      	beq.n	8000b82 <HAL_RCC_OscConfig+0xee>
 8000ba0:	e015      	b.n	8000bce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba2:	f7ff fd2b 	bl	80005fc <HAL_GetTick>
 8000ba6:	0003      	movs	r3, r0
 8000ba8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bac:	f7ff fd26 	bl	80005fc <HAL_GetTick>
 8000bb0:	0002      	movs	r2, r0
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b64      	cmp	r3, #100	; 0x64
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e275      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bbe:	4b80      	ldr	r3, [pc, #512]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	029b      	lsls	r3, r3, #10
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	d1f0      	bne.n	8000bac <HAL_RCC_OscConfig+0x118>
 8000bca:	e000      	b.n	8000bce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bcc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	d100      	bne.n	8000bda <HAL_RCC_OscConfig+0x146>
 8000bd8:	e069      	b.n	8000cae <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bda:	4b79      	ldr	r3, [pc, #484]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	220c      	movs	r2, #12
 8000be0:	4013      	ands	r3, r2
 8000be2:	d00b      	beq.n	8000bfc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000be4:	4b76      	ldr	r3, [pc, #472]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	220c      	movs	r2, #12
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b08      	cmp	r3, #8
 8000bee:	d11c      	bne.n	8000c2a <HAL_RCC_OscConfig+0x196>
 8000bf0:	4b73      	ldr	r3, [pc, #460]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	025b      	lsls	r3, r3, #9
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	d116      	bne.n	8000c2a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bfc:	4b70      	ldr	r3, [pc, #448]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2202      	movs	r2, #2
 8000c02:	4013      	ands	r3, r2
 8000c04:	d005      	beq.n	8000c12 <HAL_RCC_OscConfig+0x17e>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d001      	beq.n	8000c12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e24b      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c12:	4b6b      	ldr	r3, [pc, #428]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	22f8      	movs	r2, #248	; 0xf8
 8000c18:	4393      	bics	r3, r2
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	691b      	ldr	r3, [r3, #16]
 8000c20:	00da      	lsls	r2, r3, #3
 8000c22:	4b67      	ldr	r3, [pc, #412]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000c24:	430a      	orrs	r2, r1
 8000c26:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c28:	e041      	b.n	8000cae <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d024      	beq.n	8000c7c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c32:	4b63      	ldr	r3, [pc, #396]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b62      	ldr	r3, [pc, #392]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000c38:	2101      	movs	r1, #1
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3e:	f7ff fcdd 	bl	80005fc <HAL_GetTick>
 8000c42:	0003      	movs	r3, r0
 8000c44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c46:	e008      	b.n	8000c5a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c48:	f7ff fcd8 	bl	80005fc <HAL_GetTick>
 8000c4c:	0002      	movs	r2, r0
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d901      	bls.n	8000c5a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e227      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5a:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2202      	movs	r2, #2
 8000c60:	4013      	ands	r3, r2
 8000c62:	d0f1      	beq.n	8000c48 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c64:	4b56      	ldr	r3, [pc, #344]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	22f8      	movs	r2, #248	; 0xf8
 8000c6a:	4393      	bics	r3, r2
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	00da      	lsls	r2, r3, #3
 8000c74:	4b52      	ldr	r3, [pc, #328]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000c76:	430a      	orrs	r2, r1
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	e018      	b.n	8000cae <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c7c:	4b50      	ldr	r3, [pc, #320]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b4f      	ldr	r3, [pc, #316]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000c82:	2101      	movs	r1, #1
 8000c84:	438a      	bics	r2, r1
 8000c86:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fcb8 	bl	80005fc <HAL_GetTick>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c90:	e008      	b.n	8000ca4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c92:	f7ff fcb3 	bl	80005fc <HAL_GetTick>
 8000c96:	0002      	movs	r2, r0
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d901      	bls.n	8000ca4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	e202      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2202      	movs	r2, #2
 8000caa:	4013      	ands	r3, r2
 8000cac:	d1f1      	bne.n	8000c92 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	d036      	beq.n	8000d26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d019      	beq.n	8000cf4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cc0:	4b3f      	ldr	r3, [pc, #252]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000cc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cc4:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ccc:	f7ff fc96 	bl	80005fc <HAL_GetTick>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd4:	e008      	b.n	8000ce8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cd6:	f7ff fc91 	bl	80005fc <HAL_GetTick>
 8000cda:	0002      	movs	r2, r0
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d901      	bls.n	8000ce8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e1e0      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cec:	2202      	movs	r2, #2
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d0f1      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x242>
 8000cf2:	e018      	b.n	8000d26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cf4:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cf8:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	438a      	bics	r2, r1
 8000cfe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d00:	f7ff fc7c 	bl	80005fc <HAL_GetTick>
 8000d04:	0003      	movs	r3, r0
 8000d06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d08:	e008      	b.n	8000d1c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fc77 	bl	80005fc <HAL_GetTick>
 8000d0e:	0002      	movs	r2, r0
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e1c6      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d20:	2202      	movs	r2, #2
 8000d22:	4013      	ands	r3, r2
 8000d24:	d1f1      	bne.n	8000d0a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d100      	bne.n	8000d32 <HAL_RCC_OscConfig+0x29e>
 8000d30:	e0b4      	b.n	8000e9c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d32:	201f      	movs	r0, #31
 8000d34:	183b      	adds	r3, r7, r0
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000d3c:	69da      	ldr	r2, [r3, #28]
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	055b      	lsls	r3, r3, #21
 8000d42:	4013      	ands	r3, r2
 8000d44:	d110      	bne.n	8000d68 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000d48:	69da      	ldr	r2, [r3, #28]
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	0549      	lsls	r1, r1, #21
 8000d50:	430a      	orrs	r2, r1
 8000d52:	61da      	str	r2, [r3, #28]
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000d56:	69da      	ldr	r2, [r3, #28]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	055b      	lsls	r3, r3, #21
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d62:	183b      	adds	r3, r7, r0
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_RCC_OscConfig+0x338>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	4013      	ands	r3, r2
 8000d72:	d11a      	bne.n	8000daa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_RCC_OscConfig+0x338>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_RCC_OscConfig+0x338>)
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	0049      	lsls	r1, r1, #1
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d82:	f7ff fc3b 	bl	80005fc <HAL_GetTick>
 8000d86:	0003      	movs	r3, r0
 8000d88:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d8c:	f7ff fc36 	bl	80005fc <HAL_GetTick>
 8000d90:	0002      	movs	r2, r0
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b64      	cmp	r3, #100	; 0x64
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e185      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_RCC_OscConfig+0x338>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4013      	ands	r3, r2
 8000da8:	d0f0      	beq.n	8000d8c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d10e      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x33c>
 8000db2:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000db4:	6a1a      	ldr	r2, [r3, #32]
 8000db6:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <HAL_RCC_OscConfig+0x32c>)
 8000db8:	2101      	movs	r1, #1
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	621a      	str	r2, [r3, #32]
 8000dbe:	e035      	b.n	8000e2c <HAL_RCC_OscConfig+0x398>
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	fffeffff 	.word	0xfffeffff
 8000dc8:	fffbffff 	.word	0xfffbffff
 8000dcc:	40007000 	.word	0x40007000
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10c      	bne.n	8000df2 <HAL_RCC_OscConfig+0x35e>
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000dda:	6a1a      	ldr	r2, [r3, #32]
 8000ddc:	4bb5      	ldr	r3, [pc, #724]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	438a      	bics	r2, r1
 8000de2:	621a      	str	r2, [r3, #32]
 8000de4:	4bb3      	ldr	r3, [pc, #716]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000de6:	6a1a      	ldr	r2, [r3, #32]
 8000de8:	4bb2      	ldr	r3, [pc, #712]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000dea:	2104      	movs	r1, #4
 8000dec:	438a      	bics	r2, r1
 8000dee:	621a      	str	r2, [r3, #32]
 8000df0:	e01c      	b.n	8000e2c <HAL_RCC_OscConfig+0x398>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	2b05      	cmp	r3, #5
 8000df8:	d10c      	bne.n	8000e14 <HAL_RCC_OscConfig+0x380>
 8000dfa:	4bae      	ldr	r3, [pc, #696]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000dfc:	6a1a      	ldr	r2, [r3, #32]
 8000dfe:	4bad      	ldr	r3, [pc, #692]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000e00:	2104      	movs	r1, #4
 8000e02:	430a      	orrs	r2, r1
 8000e04:	621a      	str	r2, [r3, #32]
 8000e06:	4bab      	ldr	r3, [pc, #684]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000e08:	6a1a      	ldr	r2, [r3, #32]
 8000e0a:	4baa      	ldr	r3, [pc, #680]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	621a      	str	r2, [r3, #32]
 8000e12:	e00b      	b.n	8000e2c <HAL_RCC_OscConfig+0x398>
 8000e14:	4ba7      	ldr	r3, [pc, #668]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000e16:	6a1a      	ldr	r2, [r3, #32]
 8000e18:	4ba6      	ldr	r3, [pc, #664]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	438a      	bics	r2, r1
 8000e1e:	621a      	str	r2, [r3, #32]
 8000e20:	4ba4      	ldr	r3, [pc, #656]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000e22:	6a1a      	ldr	r2, [r3, #32]
 8000e24:	4ba3      	ldr	r3, [pc, #652]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000e26:	2104      	movs	r1, #4
 8000e28:	438a      	bics	r2, r1
 8000e2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d014      	beq.n	8000e5e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e34:	f7ff fbe2 	bl	80005fc <HAL_GetTick>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	e009      	b.n	8000e52 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e3e:	f7ff fbdd 	bl	80005fc <HAL_GetTick>
 8000e42:	0002      	movs	r2, r0
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	4a9b      	ldr	r2, [pc, #620]	; (80010b8 <HAL_RCC_OscConfig+0x624>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e12b      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e52:	4b98      	ldr	r3, [pc, #608]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	2202      	movs	r2, #2
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d0f0      	beq.n	8000e3e <HAL_RCC_OscConfig+0x3aa>
 8000e5c:	e013      	b.n	8000e86 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5e:	f7ff fbcd 	bl	80005fc <HAL_GetTick>
 8000e62:	0003      	movs	r3, r0
 8000e64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e66:	e009      	b.n	8000e7c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e68:	f7ff fbc8 	bl	80005fc <HAL_GetTick>
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	4a91      	ldr	r2, [pc, #580]	; (80010b8 <HAL_RCC_OscConfig+0x624>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e116      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e7c:	4b8d      	ldr	r3, [pc, #564]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	2202      	movs	r2, #2
 8000e82:	4013      	ands	r3, r2
 8000e84:	d1f0      	bne.n	8000e68 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e86:	231f      	movs	r3, #31
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d105      	bne.n	8000e9c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e90:	4b88      	ldr	r3, [pc, #544]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000e92:	69da      	ldr	r2, [r3, #28]
 8000e94:	4b87      	ldr	r3, [pc, #540]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000e96:	4989      	ldr	r1, [pc, #548]	; (80010bc <HAL_RCC_OscConfig+0x628>)
 8000e98:	400a      	ands	r2, r1
 8000e9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d063      	beq.n	8000f6e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d12a      	bne.n	8000f04 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000eae:	4b81      	ldr	r3, [pc, #516]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb2:	4b80      	ldr	r3, [pc, #512]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000eba:	4b7e      	ldr	r3, [pc, #504]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ebe:	4b7d      	ldr	r3, [pc, #500]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fb99 	bl	80005fc <HAL_GetTick>
 8000eca:	0003      	movs	r3, r0
 8000ecc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ed0:	f7ff fb94 	bl	80005fc <HAL_GetTick>
 8000ed4:	0002      	movs	r2, r0
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e0e3      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ee2:	4b74      	ldr	r3, [pc, #464]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d0f1      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000eec:	4b71      	ldr	r3, [pc, #452]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef0:	22f8      	movs	r2, #248	; 0xf8
 8000ef2:	4393      	bics	r3, r2
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	00da      	lsls	r2, r3, #3
 8000efc:	4b6d      	ldr	r3, [pc, #436]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000efe:	430a      	orrs	r2, r1
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
 8000f02:	e034      	b.n	8000f6e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	3305      	adds	r3, #5
 8000f0a:	d111      	bne.n	8000f30 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f0c:	4b69      	ldr	r3, [pc, #420]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f10:	4b68      	ldr	r3, [pc, #416]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000f12:	2104      	movs	r1, #4
 8000f14:	438a      	bics	r2, r1
 8000f16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f18:	4b66      	ldr	r3, [pc, #408]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1c:	22f8      	movs	r2, #248	; 0xf8
 8000f1e:	4393      	bics	r3, r2
 8000f20:	0019      	movs	r1, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	00da      	lsls	r2, r3, #3
 8000f28:	4b62      	ldr	r3, [pc, #392]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f2e:	e01e      	b.n	8000f6e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f30:	4b60      	ldr	r3, [pc, #384]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f34:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000f36:	2104      	movs	r1, #4
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000f3c:	4b5d      	ldr	r3, [pc, #372]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000f3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f40:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000f42:	2101      	movs	r1, #1
 8000f44:	438a      	bics	r2, r1
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f48:	f7ff fb58 	bl	80005fc <HAL_GetTick>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f50:	e008      	b.n	8000f64 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f52:	f7ff fb53 	bl	80005fc <HAL_GetTick>
 8000f56:	0002      	movs	r2, r0
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e0a2      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f64:	4b53      	ldr	r3, [pc, #332]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f68:	2202      	movs	r2, #2
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d1f1      	bne.n	8000f52 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d100      	bne.n	8000f78 <HAL_RCC_OscConfig+0x4e4>
 8000f76:	e097      	b.n	80010a8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f78:	4b4e      	ldr	r3, [pc, #312]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	220c      	movs	r2, #12
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d100      	bne.n	8000f86 <HAL_RCC_OscConfig+0x4f2>
 8000f84:	e06b      	b.n	800105e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a1b      	ldr	r3, [r3, #32]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d14c      	bne.n	8001028 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8e:	4b49      	ldr	r3, [pc, #292]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000f94:	494a      	ldr	r1, [pc, #296]	; (80010c0 <HAL_RCC_OscConfig+0x62c>)
 8000f96:	400a      	ands	r2, r1
 8000f98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fb2f 	bl	80005fc <HAL_GetTick>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa4:	f7ff fb2a 	bl	80005fc <HAL_GetTick>
 8000fa8:	0002      	movs	r2, r0
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e079      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb6:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	049b      	lsls	r3, r3, #18
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	4393      	bics	r3, r2
 8000fca:	0019      	movs	r1, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd0:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fd6:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4a3a      	ldr	r2, [pc, #232]	; (80010c4 <HAL_RCC_OscConfig+0x630>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	0019      	movs	r1, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000fec:	430a      	orrs	r2, r1
 8000fee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ff0:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	0449      	lsls	r1, r1, #17
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fafd 	bl	80005fc <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001008:	f7ff faf8 	bl	80005fc <HAL_GetTick>
 800100c:	0002      	movs	r2, r0
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e047      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	049b      	lsls	r3, r3, #18
 8001022:	4013      	ands	r3, r2
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0x574>
 8001026:	e03f      	b.n	80010a8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 800102e:	4924      	ldr	r1, [pc, #144]	; (80010c0 <HAL_RCC_OscConfig+0x62c>)
 8001030:	400a      	ands	r2, r1
 8001032:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fae2 	bl	80005fc <HAL_GetTick>
 8001038:	0003      	movs	r3, r0
 800103a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800103e:	f7ff fadd 	bl	80005fc <HAL_GetTick>
 8001042:	0002      	movs	r2, r0
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e02c      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	049b      	lsls	r3, r3, #18
 8001058:	4013      	ands	r3, r2
 800105a:	d1f0      	bne.n	800103e <HAL_RCC_OscConfig+0x5aa>
 800105c:	e024      	b.n	80010a8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e01f      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001070:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_RCC_OscConfig+0x620>)
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001074:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	025b      	lsls	r3, r3, #9
 800107c:	401a      	ands	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	429a      	cmp	r2, r3
 8001084:	d10e      	bne.n	80010a4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	220f      	movs	r2, #15
 800108a:	401a      	ands	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001090:	429a      	cmp	r2, r3
 8001092:	d107      	bne.n	80010a4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	23f0      	movs	r3, #240	; 0xf0
 8001098:	039b      	lsls	r3, r3, #14
 800109a:	401a      	ands	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d001      	beq.n	80010a8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b008      	add	sp, #32
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	40021000 	.word	0x40021000
 80010b8:	00001388 	.word	0x00001388
 80010bc:	efffffff 	.word	0xefffffff
 80010c0:	feffffff 	.word	0xfeffffff
 80010c4:	ffc2ffff 	.word	0xffc2ffff

080010c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0b3      	b.n	8001244 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010dc:	4b5b      	ldr	r3, [pc, #364]	; (800124c <HAL_RCC_ClockConfig+0x184>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2201      	movs	r2, #1
 80010e2:	4013      	ands	r3, r2
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d911      	bls.n	800110e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ea:	4b58      	ldr	r3, [pc, #352]	; (800124c <HAL_RCC_ClockConfig+0x184>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2201      	movs	r2, #1
 80010f0:	4393      	bics	r3, r2
 80010f2:	0019      	movs	r1, r3
 80010f4:	4b55      	ldr	r3, [pc, #340]	; (800124c <HAL_RCC_ClockConfig+0x184>)
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_RCC_ClockConfig+0x184>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2201      	movs	r2, #1
 8001102:	4013      	ands	r3, r2
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d001      	beq.n	800110e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e09a      	b.n	8001244 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2202      	movs	r2, #2
 8001114:	4013      	ands	r3, r2
 8001116:	d015      	beq.n	8001144 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2204      	movs	r2, #4
 800111e:	4013      	ands	r3, r2
 8001120:	d006      	beq.n	8001130 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001122:	4b4b      	ldr	r3, [pc, #300]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 8001128:	21e0      	movs	r1, #224	; 0xe0
 800112a:	00c9      	lsls	r1, r1, #3
 800112c:	430a      	orrs	r2, r1
 800112e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001130:	4b47      	ldr	r3, [pc, #284]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	22f0      	movs	r2, #240	; 0xf0
 8001136:	4393      	bics	r3, r2
 8001138:	0019      	movs	r1, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	4b44      	ldr	r3, [pc, #272]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 8001140:	430a      	orrs	r2, r1
 8001142:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2201      	movs	r2, #1
 800114a:	4013      	ands	r3, r2
 800114c:	d040      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d107      	bne.n	8001166 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	029b      	lsls	r3, r3, #10
 800115e:	4013      	ands	r3, r2
 8001160:	d114      	bne.n	800118c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e06e      	b.n	8001244 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d107      	bne.n	800117e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116e:	4b38      	ldr	r3, [pc, #224]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	049b      	lsls	r3, r3, #18
 8001176:	4013      	ands	r3, r2
 8001178:	d108      	bne.n	800118c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e062      	b.n	8001244 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117e:	4b34      	ldr	r3, [pc, #208]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2202      	movs	r2, #2
 8001184:	4013      	ands	r3, r2
 8001186:	d101      	bne.n	800118c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e05b      	b.n	8001244 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2203      	movs	r2, #3
 8001192:	4393      	bics	r3, r2
 8001194:	0019      	movs	r1, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 800119c:	430a      	orrs	r2, r1
 800119e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011a0:	f7ff fa2c 	bl	80005fc <HAL_GetTick>
 80011a4:	0003      	movs	r3, r0
 80011a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a8:	e009      	b.n	80011be <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011aa:	f7ff fa27 	bl	80005fc <HAL_GetTick>
 80011ae:	0002      	movs	r2, r0
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	4a27      	ldr	r2, [pc, #156]	; (8001254 <HAL_RCC_ClockConfig+0x18c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e042      	b.n	8001244 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	220c      	movs	r2, #12
 80011c4:	401a      	ands	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d1ec      	bne.n	80011aa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <HAL_RCC_ClockConfig+0x184>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2201      	movs	r2, #1
 80011d6:	4013      	ands	r3, r2
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d211      	bcs.n	8001202 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_RCC_ClockConfig+0x184>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2201      	movs	r2, #1
 80011e4:	4393      	bics	r3, r2
 80011e6:	0019      	movs	r1, r3
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_RCC_ClockConfig+0x184>)
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <HAL_RCC_ClockConfig+0x184>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2201      	movs	r2, #1
 80011f6:	4013      	ands	r3, r2
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d001      	beq.n	8001202 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e020      	b.n	8001244 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2204      	movs	r2, #4
 8001208:	4013      	ands	r3, r2
 800120a:	d009      	beq.n	8001220 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a11      	ldr	r2, [pc, #68]	; (8001258 <HAL_RCC_ClockConfig+0x190>)
 8001212:	4013      	ands	r3, r2
 8001214:	0019      	movs	r1, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 800121c:	430a      	orrs	r2, r1
 800121e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001220:	f000 f820 	bl	8001264 <HAL_RCC_GetSysClockFreq>
 8001224:	0001      	movs	r1, r0
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_RCC_ClockConfig+0x188>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	220f      	movs	r2, #15
 800122e:	4013      	ands	r3, r2
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_RCC_ClockConfig+0x194>)
 8001232:	5cd3      	ldrb	r3, [r2, r3]
 8001234:	000a      	movs	r2, r1
 8001236:	40da      	lsrs	r2, r3
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_RCC_ClockConfig+0x198>)
 800123a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800123c:	2003      	movs	r0, #3
 800123e:	f7ff f997 	bl	8000570 <HAL_InitTick>
  
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b004      	add	sp, #16
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40022000 	.word	0x40022000
 8001250:	40021000 	.word	0x40021000
 8001254:	00001388 	.word	0x00001388
 8001258:	fffff8ff 	.word	0xfffff8ff
 800125c:	080016d4 	.word	0x080016d4
 8001260:	20000000 	.word	0x20000000

08001264 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b08f      	sub	sp, #60	; 0x3c
 8001268:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800126a:	2314      	movs	r3, #20
 800126c:	18fb      	adds	r3, r7, r3
 800126e:	4a2b      	ldr	r2, [pc, #172]	; (800131c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001270:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001272:	c313      	stmia	r3!, {r0, r1, r4}
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4a29      	ldr	r2, [pc, #164]	; (8001320 <HAL_RCC_GetSysClockFreq+0xbc>)
 800127c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800127e:	c313      	stmia	r3!, {r0, r1, r4}
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	; 0x34
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_RCC_GetSysClockFreq+0xc0>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a0:	220c      	movs	r2, #12
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	d002      	beq.n	80012ae <HAL_RCC_GetSysClockFreq+0x4a>
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d003      	beq.n	80012b4 <HAL_RCC_GetSysClockFreq+0x50>
 80012ac:	e02d      	b.n	800130a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_RCC_GetSysClockFreq+0xc4>)
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012b2:	e02d      	b.n	8001310 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	0c9b      	lsrs	r3, r3, #18
 80012b8:	220f      	movs	r2, #15
 80012ba:	4013      	ands	r3, r2
 80012bc:	2214      	movs	r2, #20
 80012be:	18ba      	adds	r2, r7, r2
 80012c0:	5cd3      	ldrb	r3, [r2, r3]
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c8:	220f      	movs	r2, #15
 80012ca:	4013      	ands	r3, r2
 80012cc:	1d3a      	adds	r2, r7, #4
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80012d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	025b      	lsls	r3, r3, #9
 80012d8:	4013      	ands	r3, r2
 80012da:	d009      	beq.n	80012f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80012dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012de:	4812      	ldr	r0, [pc, #72]	; (8001328 <HAL_RCC_GetSysClockFreq+0xc4>)
 80012e0:	f7fe ff12 	bl	8000108 <__udivsi3>
 80012e4:	0003      	movs	r3, r0
 80012e6:	001a      	movs	r2, r3
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	4353      	muls	r3, r2
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
 80012ee:	e009      	b.n	8001304 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80012f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012f2:	000a      	movs	r2, r1
 80012f4:	0152      	lsls	r2, r2, #5
 80012f6:	1a52      	subs	r2, r2, r1
 80012f8:	0193      	lsls	r3, r2, #6
 80012fa:	1a9b      	subs	r3, r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	185b      	adds	r3, r3, r1
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001308:	e002      	b.n	8001310 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_RCC_GetSysClockFreq+0xc4>)
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800130e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b00f      	add	sp, #60	; 0x3c
 8001318:	bd90      	pop	{r4, r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	080016b4 	.word	0x080016b4
 8001320:	080016c4 	.word	0x080016c4
 8001324:	40021000 	.word	0x40021000
 8001328:	007a1200 	.word	0x007a1200

0800132c <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f411xe.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	1dbb      	adds	r3, r7, #6
 8001338:	801a      	strh	r2, [r3, #0]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1dba      	adds	r2, r7, #6
 8001344:	8812      	ldrh	r2, [r2, #0]
 8001346:	809a      	strh	r2, [r3, #4]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	719a      	strb	r2, [r3, #6]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	0018      	movs	r0, r3
 8001364:	f000 f843 	bl	80013ee <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b004      	add	sp, #16
 8001370:	bd80      	pop	{r7, pc}

08001372 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	889b      	ldrh	r3, [r3, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	0019      	movs	r1, r3
 8001386:	f7ff fb67 	bl	8000a58 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	741a      	strb	r2, [r3, #16]
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}

08001398 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	889b      	ldrh	r3, [r3, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	0019      	movs	r1, r3
 80013ac:	f7ff fb54 	bl	8000a58 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	741a      	strb	r2, [r3, #16]
}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}

080013be <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7c1b      	ldrb	r3, [r3, #16]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d006      	beq.n	80013dc <_ZN15QAD_GPIO_Output6toggleEv+0x1e>
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d109      	bne.n	80013e6 <_ZN15QAD_GPIO_Output6toggleEv+0x28>
	  case (QAD_GPIO_PinState_On):
	  	off();
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff ffdf 	bl	8001398 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 80013da:	e004      	b.n	80013e6 <_ZN15QAD_GPIO_Output6toggleEv+0x28>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	0018      	movs	r0, r3
 80013e0:	f7ff ffc7 	bl	8001372 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 80013e4:	46c0      	nop			; (mov r8, r8)
	}
}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 80013ee:	b590      	push	{r4, r7, lr}
 80013f0:	b089      	sub	sp, #36	; 0x24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 80013f6:	240c      	movs	r4, #12
 80013f8:	193b      	adds	r3, r7, r4
 80013fa:	0018      	movs	r0, r3
 80013fc:	2314      	movs	r3, #20
 80013fe:	001a      	movs	r2, r3
 8001400:	2100      	movs	r1, #0
 8001402:	f000 f877 	bl	80014f4 <memset>
	GPIO_Init.Pin    = m_uPin;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	889b      	ldrh	r3, [r3, #4]
 800140a:	001a      	movs	r2, r3
 800140c:	193b      	adds	r3, r7, r4
 800140e:	601a      	str	r2, [r3, #0]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	799b      	ldrb	r3, [r3, #6]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <_ZN15QAD_GPIO_Output10periphInitEv+0x2e>
 8001418:	2211      	movs	r2, #17
 800141a:	e000      	b.n	800141e <_ZN15QAD_GPIO_Output10periphInitEv+0x30>
 800141c:	2201      	movs	r2, #1
 800141e:	210c      	movs	r1, #12
 8001420:	187b      	adds	r3, r7, r1
 8001422:	605a      	str	r2, [r3, #4]
	GPIO_Init.Pull   = m_ePullMode;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	187b      	adds	r3, r7, r1
 800142a:	609a      	str	r2, [r3, #8]
	GPIO_Init.Speed  = m_eSpeed;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	187b      	adds	r3, r7, r1
 8001432:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	187a      	adds	r2, r7, r1
 800143a:	0011      	movs	r1, r2
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff f99b 	bl	8000778 <HAL_GPIO_Init>
}
 8001442:	46c0      	nop			; (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b009      	add	sp, #36	; 0x24
 8001448:	bd90      	pop	{r4, r7, pc}

0800144a <_Znwj>:
 800144a:	b510      	push	{r4, lr}
 800144c:	1e04      	subs	r4, r0, #0
 800144e:	d100      	bne.n	8001452 <_Znwj+0x8>
 8001450:	3401      	adds	r4, #1
 8001452:	0020      	movs	r0, r4
 8001454:	f000 f844 	bl	80014e0 <malloc>
 8001458:	2800      	cmp	r0, #0
 800145a:	d107      	bne.n	800146c <_Znwj+0x22>
 800145c:	f000 f808 	bl	8001470 <_ZSt15get_new_handlerv>
 8001460:	2800      	cmp	r0, #0
 8001462:	d101      	bne.n	8001468 <_Znwj+0x1e>
 8001464:	f000 f80a 	bl	800147c <abort>
 8001468:	4780      	blx	r0
 800146a:	e7f2      	b.n	8001452 <_Znwj+0x8>
 800146c:	bd10      	pop	{r4, pc}
	...

08001470 <_ZSt15get_new_handlerv>:
 8001470:	4b01      	ldr	r3, [pc, #4]	; (8001478 <_ZSt15get_new_handlerv+0x8>)
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	4770      	bx	lr
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	20000094 	.word	0x20000094

0800147c <abort>:
 800147c:	2006      	movs	r0, #6
 800147e:	b510      	push	{r4, lr}
 8001480:	f000 f8da 	bl	8001638 <raise>
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff f82b 	bl	80004e0 <_exit>
	...

0800148c <__errno>:
 800148c:	4b01      	ldr	r3, [pc, #4]	; (8001494 <__errno+0x8>)
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	4770      	bx	lr
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	2000000c 	.word	0x2000000c

08001498 <__libc_init_array>:
 8001498:	b570      	push	{r4, r5, r6, lr}
 800149a:	2600      	movs	r6, #0
 800149c:	4d0c      	ldr	r5, [pc, #48]	; (80014d0 <__libc_init_array+0x38>)
 800149e:	4c0d      	ldr	r4, [pc, #52]	; (80014d4 <__libc_init_array+0x3c>)
 80014a0:	1b64      	subs	r4, r4, r5
 80014a2:	10a4      	asrs	r4, r4, #2
 80014a4:	42a6      	cmp	r6, r4
 80014a6:	d109      	bne.n	80014bc <__libc_init_array+0x24>
 80014a8:	2600      	movs	r6, #0
 80014aa:	f000 f8f7 	bl	800169c <_init>
 80014ae:	4d0a      	ldr	r5, [pc, #40]	; (80014d8 <__libc_init_array+0x40>)
 80014b0:	4c0a      	ldr	r4, [pc, #40]	; (80014dc <__libc_init_array+0x44>)
 80014b2:	1b64      	subs	r4, r4, r5
 80014b4:	10a4      	asrs	r4, r4, #2
 80014b6:	42a6      	cmp	r6, r4
 80014b8:	d105      	bne.n	80014c6 <__libc_init_array+0x2e>
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
 80014bc:	00b3      	lsls	r3, r6, #2
 80014be:	58eb      	ldr	r3, [r5, r3]
 80014c0:	4798      	blx	r3
 80014c2:	3601      	adds	r6, #1
 80014c4:	e7ee      	b.n	80014a4 <__libc_init_array+0xc>
 80014c6:	00b3      	lsls	r3, r6, #2
 80014c8:	58eb      	ldr	r3, [r5, r3]
 80014ca:	4798      	blx	r3
 80014cc:	3601      	adds	r6, #1
 80014ce:	e7f2      	b.n	80014b6 <__libc_init_array+0x1e>
 80014d0:	080016e4 	.word	0x080016e4
 80014d4:	080016e4 	.word	0x080016e4
 80014d8:	080016e4 	.word	0x080016e4
 80014dc:	080016e8 	.word	0x080016e8

080014e0 <malloc>:
 80014e0:	b510      	push	{r4, lr}
 80014e2:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <malloc+0x10>)
 80014e4:	0001      	movs	r1, r0
 80014e6:	6818      	ldr	r0, [r3, #0]
 80014e8:	f000 f80c 	bl	8001504 <_malloc_r>
 80014ec:	bd10      	pop	{r4, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	2000000c 	.word	0x2000000c

080014f4 <memset>:
 80014f4:	0003      	movs	r3, r0
 80014f6:	1882      	adds	r2, r0, r2
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d100      	bne.n	80014fe <memset+0xa>
 80014fc:	4770      	bx	lr
 80014fe:	7019      	strb	r1, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	e7f9      	b.n	80014f8 <memset+0x4>

08001504 <_malloc_r>:
 8001504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001506:	2303      	movs	r3, #3
 8001508:	1ccd      	adds	r5, r1, #3
 800150a:	439d      	bics	r5, r3
 800150c:	3508      	adds	r5, #8
 800150e:	0006      	movs	r6, r0
 8001510:	2d0c      	cmp	r5, #12
 8001512:	d21f      	bcs.n	8001554 <_malloc_r+0x50>
 8001514:	250c      	movs	r5, #12
 8001516:	42a9      	cmp	r1, r5
 8001518:	d81e      	bhi.n	8001558 <_malloc_r+0x54>
 800151a:	0030      	movs	r0, r6
 800151c:	f000 f8ac 	bl	8001678 <__malloc_lock>
 8001520:	4925      	ldr	r1, [pc, #148]	; (80015b8 <_malloc_r+0xb4>)
 8001522:	680a      	ldr	r2, [r1, #0]
 8001524:	0014      	movs	r4, r2
 8001526:	2c00      	cmp	r4, #0
 8001528:	d11a      	bne.n	8001560 <_malloc_r+0x5c>
 800152a:	4f24      	ldr	r7, [pc, #144]	; (80015bc <_malloc_r+0xb8>)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d104      	bne.n	800153c <_malloc_r+0x38>
 8001532:	0021      	movs	r1, r4
 8001534:	0030      	movs	r0, r6
 8001536:	f000 f843 	bl	80015c0 <_sbrk_r>
 800153a:	6038      	str	r0, [r7, #0]
 800153c:	0029      	movs	r1, r5
 800153e:	0030      	movs	r0, r6
 8001540:	f000 f83e 	bl	80015c0 <_sbrk_r>
 8001544:	1c43      	adds	r3, r0, #1
 8001546:	d12b      	bne.n	80015a0 <_malloc_r+0x9c>
 8001548:	230c      	movs	r3, #12
 800154a:	0030      	movs	r0, r6
 800154c:	6033      	str	r3, [r6, #0]
 800154e:	f000 f89b 	bl	8001688 <__malloc_unlock>
 8001552:	e003      	b.n	800155c <_malloc_r+0x58>
 8001554:	2d00      	cmp	r5, #0
 8001556:	dade      	bge.n	8001516 <_malloc_r+0x12>
 8001558:	230c      	movs	r3, #12
 800155a:	6033      	str	r3, [r6, #0]
 800155c:	2000      	movs	r0, #0
 800155e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	1b5b      	subs	r3, r3, r5
 8001564:	d419      	bmi.n	800159a <_malloc_r+0x96>
 8001566:	2b0b      	cmp	r3, #11
 8001568:	d903      	bls.n	8001572 <_malloc_r+0x6e>
 800156a:	6023      	str	r3, [r4, #0]
 800156c:	18e4      	adds	r4, r4, r3
 800156e:	6025      	str	r5, [r4, #0]
 8001570:	e003      	b.n	800157a <_malloc_r+0x76>
 8001572:	6863      	ldr	r3, [r4, #4]
 8001574:	42a2      	cmp	r2, r4
 8001576:	d10e      	bne.n	8001596 <_malloc_r+0x92>
 8001578:	600b      	str	r3, [r1, #0]
 800157a:	0030      	movs	r0, r6
 800157c:	f000 f884 	bl	8001688 <__malloc_unlock>
 8001580:	0020      	movs	r0, r4
 8001582:	2207      	movs	r2, #7
 8001584:	300b      	adds	r0, #11
 8001586:	1d23      	adds	r3, r4, #4
 8001588:	4390      	bics	r0, r2
 800158a:	1ac2      	subs	r2, r0, r3
 800158c:	4298      	cmp	r0, r3
 800158e:	d0e6      	beq.n	800155e <_malloc_r+0x5a>
 8001590:	1a1b      	subs	r3, r3, r0
 8001592:	50a3      	str	r3, [r4, r2]
 8001594:	e7e3      	b.n	800155e <_malloc_r+0x5a>
 8001596:	6053      	str	r3, [r2, #4]
 8001598:	e7ef      	b.n	800157a <_malloc_r+0x76>
 800159a:	0022      	movs	r2, r4
 800159c:	6864      	ldr	r4, [r4, #4]
 800159e:	e7c2      	b.n	8001526 <_malloc_r+0x22>
 80015a0:	2303      	movs	r3, #3
 80015a2:	1cc4      	adds	r4, r0, #3
 80015a4:	439c      	bics	r4, r3
 80015a6:	42a0      	cmp	r0, r4
 80015a8:	d0e1      	beq.n	800156e <_malloc_r+0x6a>
 80015aa:	1a21      	subs	r1, r4, r0
 80015ac:	0030      	movs	r0, r6
 80015ae:	f000 f807 	bl	80015c0 <_sbrk_r>
 80015b2:	1c43      	adds	r3, r0, #1
 80015b4:	d1db      	bne.n	800156e <_malloc_r+0x6a>
 80015b6:	e7c7      	b.n	8001548 <_malloc_r+0x44>
 80015b8:	20000098 	.word	0x20000098
 80015bc:	2000009c 	.word	0x2000009c

080015c0 <_sbrk_r>:
 80015c0:	2300      	movs	r3, #0
 80015c2:	b570      	push	{r4, r5, r6, lr}
 80015c4:	4d06      	ldr	r5, [pc, #24]	; (80015e0 <_sbrk_r+0x20>)
 80015c6:	0004      	movs	r4, r0
 80015c8:	0008      	movs	r0, r1
 80015ca:	602b      	str	r3, [r5, #0]
 80015cc:	f7fe ff94 	bl	80004f8 <_sbrk>
 80015d0:	1c43      	adds	r3, r0, #1
 80015d2:	d103      	bne.n	80015dc <_sbrk_r+0x1c>
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d000      	beq.n	80015dc <_sbrk_r+0x1c>
 80015da:	6023      	str	r3, [r4, #0]
 80015dc:	bd70      	pop	{r4, r5, r6, pc}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	200000a4 	.word	0x200000a4

080015e4 <_raise_r>:
 80015e4:	b570      	push	{r4, r5, r6, lr}
 80015e6:	0004      	movs	r4, r0
 80015e8:	000d      	movs	r5, r1
 80015ea:	291f      	cmp	r1, #31
 80015ec:	d904      	bls.n	80015f8 <_raise_r+0x14>
 80015ee:	2316      	movs	r3, #22
 80015f0:	6003      	str	r3, [r0, #0]
 80015f2:	2001      	movs	r0, #1
 80015f4:	4240      	negs	r0, r0
 80015f6:	bd70      	pop	{r4, r5, r6, pc}
 80015f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d004      	beq.n	8001608 <_raise_r+0x24>
 80015fe:	008a      	lsls	r2, r1, #2
 8001600:	189b      	adds	r3, r3, r2
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2a00      	cmp	r2, #0
 8001606:	d108      	bne.n	800161a <_raise_r+0x36>
 8001608:	0020      	movs	r0, r4
 800160a:	f000 f831 	bl	8001670 <_getpid_r>
 800160e:	002a      	movs	r2, r5
 8001610:	0001      	movs	r1, r0
 8001612:	0020      	movs	r0, r4
 8001614:	f000 f81a 	bl	800164c <_kill_r>
 8001618:	e7ed      	b.n	80015f6 <_raise_r+0x12>
 800161a:	2000      	movs	r0, #0
 800161c:	2a01      	cmp	r2, #1
 800161e:	d0ea      	beq.n	80015f6 <_raise_r+0x12>
 8001620:	1c51      	adds	r1, r2, #1
 8001622:	d103      	bne.n	800162c <_raise_r+0x48>
 8001624:	2316      	movs	r3, #22
 8001626:	3001      	adds	r0, #1
 8001628:	6023      	str	r3, [r4, #0]
 800162a:	e7e4      	b.n	80015f6 <_raise_r+0x12>
 800162c:	2400      	movs	r4, #0
 800162e:	0028      	movs	r0, r5
 8001630:	601c      	str	r4, [r3, #0]
 8001632:	4790      	blx	r2
 8001634:	0020      	movs	r0, r4
 8001636:	e7de      	b.n	80015f6 <_raise_r+0x12>

08001638 <raise>:
 8001638:	b510      	push	{r4, lr}
 800163a:	4b03      	ldr	r3, [pc, #12]	; (8001648 <raise+0x10>)
 800163c:	0001      	movs	r1, r0
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	f7ff ffd0 	bl	80015e4 <_raise_r>
 8001644:	bd10      	pop	{r4, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	2000000c 	.word	0x2000000c

0800164c <_kill_r>:
 800164c:	2300      	movs	r3, #0
 800164e:	b570      	push	{r4, r5, r6, lr}
 8001650:	4d06      	ldr	r5, [pc, #24]	; (800166c <_kill_r+0x20>)
 8001652:	0004      	movs	r4, r0
 8001654:	0008      	movs	r0, r1
 8001656:	0011      	movs	r1, r2
 8001658:	602b      	str	r3, [r5, #0]
 800165a:	f7fe ff31 	bl	80004c0 <_kill>
 800165e:	1c43      	adds	r3, r0, #1
 8001660:	d103      	bne.n	800166a <_kill_r+0x1e>
 8001662:	682b      	ldr	r3, [r5, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d000      	beq.n	800166a <_kill_r+0x1e>
 8001668:	6023      	str	r3, [r4, #0]
 800166a:	bd70      	pop	{r4, r5, r6, pc}
 800166c:	200000a4 	.word	0x200000a4

08001670 <_getpid_r>:
 8001670:	b510      	push	{r4, lr}
 8001672:	f7fe ff1f 	bl	80004b4 <_getpid>
 8001676:	bd10      	pop	{r4, pc}

08001678 <__malloc_lock>:
 8001678:	b510      	push	{r4, lr}
 800167a:	4802      	ldr	r0, [pc, #8]	; (8001684 <__malloc_lock+0xc>)
 800167c:	f000 f80c 	bl	8001698 <__retarget_lock_acquire_recursive>
 8001680:	bd10      	pop	{r4, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	200000ac 	.word	0x200000ac

08001688 <__malloc_unlock>:
 8001688:	b510      	push	{r4, lr}
 800168a:	4802      	ldr	r0, [pc, #8]	; (8001694 <__malloc_unlock+0xc>)
 800168c:	f000 f805 	bl	800169a <__retarget_lock_release_recursive>
 8001690:	bd10      	pop	{r4, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	200000ac 	.word	0x200000ac

08001698 <__retarget_lock_acquire_recursive>:
 8001698:	4770      	bx	lr

0800169a <__retarget_lock_release_recursive>:
 800169a:	4770      	bx	lr

0800169c <_init>:
 800169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016a2:	bc08      	pop	{r3}
 80016a4:	469e      	mov	lr, r3
 80016a6:	4770      	bx	lr

080016a8 <_fini>:
 80016a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ae:	bc08      	pop	{r3}
 80016b0:	469e      	mov	lr, r3
 80016b2:	4770      	bx	lr
